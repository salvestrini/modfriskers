#! @PYTHON@
# -*- python -*-

#
# python-autofrisk
#
# Copyright (C) 2008, 2009 Francesco Salvestrini
#                          Alessandro Massignan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

import sys
import os.path
import re

package_name    = "@PACKAGE_NAME@"
program_name    = "python-autofrisk"
package_version = "@PACKAGE_VERSION@"

#
# Utilities
#
debug_enabled = True

def debug(message) :
    if debug_enabled :
        sys.stderr.write(program_name + ": " + message)

def warning(message) :
    sys.stderr.write(program_name + ": " + message)

def error(message) :
    sys.stderr.write(program_name + ": " + message)

def bug(message) :
    sys.stderr.write("Bug hit: " + message)
    sys.exit(1)

#
# Global variables
#
module_regexps = [ ] # Exclusive
file_regexps   = [ ] # Inclusive
files          = [ ]
base           = ""


#
# Misc
#
def files_collect(basedir) :
    fl = [ ]

    for root, dirs, files in os.walk(basedir) :

        for rel_name in files :
            abs_name = root + "/" + rel_name

            if os.path.islink(abs_name) :
                debug("Skipping, `" + rel_name + "' is a link... \n")
                continue

            fh = open(abs_name, "r")
            if fh == None :
                warning("File `" + rel_name + "' is not readable\n")
                continue
            fh.close()

            for i in file_regexps :
                debug("Checking `" + i + "' against `" + rel_name + "'\n")

                s = re.sub(r'\/', ',', i)
                s = s + "$"
                m = re.compile(r'' + s + '')

                t = re.sub(r'\/', ',', abs_name)

                if m.search(t) :
                    debug("Keeping, it matches regexp `" + i + "'\n");
                    fl.append(rel_name)
                else :
                    debug("File `" + rel_name + "' has been dropped, " +
                          "it doesn't matches regexps\n");

    return fl

def hint(string) :

    if string != None :
        print(program_name + ": " + string)

    print("Try `" + program_name + " --help' for more information.")

def help() :
    print("Usage: $program [OPTION] FILE")
    print
    print("    Autofrisk python modules.")
    print
    print("OPTIONS:")
    print
    print("    --help,    -h    display this help and exit")
    print("    --version, -V    output version information and exit")
    print
    print("Report bugs to <" + "@PACKAGE_BUGREPORT@" + ">")

def version() :
    print(program_name + " (" +
          package_name + ") " +
          package_version)
    print("Written by Francesco Salvestrini")
    print
    print("This is free software; see the source for copying conditions.  There is NO")
    print("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.")


#
# Main
#
if len(sys.argv) == 1 :
    hint("Missing parameters");
    sys.exit(1)

if len(sys.argv) > 2 :
    hint("too many parameters");
    sys.exit(1)

if ((sys.argv[1] == "-h") or (sys.argv[1] == "--help")) :
    help()
    sys.exit(0)

if ((sys.argv[1] == "-V") or (sys.argv[1] == "--version")) :
    version()
    sys.exit(0)


#
# Handle rules file
#
rules_file   = sys.argv[1]
rules_handle = open(rules_file, "r")

if (rules_handle == None) :
    error("Cannot open \`" + rules_file + "' for input\n")
    sys.exit(1)

line_number = 0

for line in rules_handle :
    line_number = line_number + 1
    r           = None

    r = re.match(r'^[ \t]*#.*\n*$', line)
    if r :
        # Skip comments
        continue

    r = re.match(r'^[ \t\n]*$', line)
    if r :
        # Skip empty lines
        continue

    r = re.match(r'^[ \t]*files-glob[ \t]+(.*)\n*$', line)
    if r :
        x = r.group(1).strip()
        file_regexps.append(x)
        debug(x + "\n")
        continue

    r = re.match(r'^[ \t]*non-critical-external[ \t](.*)\n*$', line)
    if r :
        x = r.group(1).strip()
        module_regexps.append(x)
        continue

    r = re.match(r'^[ \t]*non-critical-internal[ \t](.*)\n*$', line)

    if r :
        x = r.group(1).strip()
        module_regexps.append(x)
        continue

    error("Unknown line `" + line.rstrip() + "' " + \
          "found in file " + rules_file    + ": " + \
          str(line_number) + "\n")
    sys.exit(1)

rules_handle.close()


debug("Files-glob regexps (inclusive):\n")
for i in  file_regexps :
    debug("  regexp = `" + i + "'\n")

debug("Modules-glob regexps (exclusive):\n")
for i in module_regexps :
    debug("  regexp = `" + i + "'\n")


#
# Compute file list
#
base = os.getcwd()

debug("base = `" + base + "'\n")
files = files_collect(base)

debug("Files that match:\n")

for i in files :
    debug("match = " + str(i) + "\n")


#
# Scan each file for modules
#
modules = { }

for filename in files :
    filehandle = open(filename, "r")

    if filehandle == None :
        error("Unable to open `" + filename + "' for reading\n")
        sys.exit(1)

    for line in filehandle :
        line.strip()

        #import_stmt    ::=  "import" module ["as" name] ( "," module ["as" name] )*
        #                    | "from" relative_module "import" identifier ["as" name]
        #                    ( "," identifier ["as" name] )*
        #                    | "from" relative_module "import" "(" identifier ["as" name]
        #                    ( "," identifier ["as" name] )* [","] ")"
        #                    | "from" module "import" "*"
        #module          ::=  (identifier ".")* identifier
        #relative_module ::=  "."* module | "."+
        #name            ::=  identifier
        #identifier ::=  (letter|"_") (letter | digit | "_")*

        r = re.search(r'^[ \t]*import[ \t]+(.*)[ \t]*$', line)
        if r :
            m_string = r.group(1)

            # Sanitize it!
            m_string = re.sub(r'[ \t]+as[ \t]+[A-Za-z_][A-Za-z0-9_\.]*',
                              '',
                              m_string)

            if m_string == None :
                continue

            m_list = re.split(r'[ \t]*,[ \t]*', m_string)

            for m in m_list :
                modules[m] = "INCLUDE"

            continue

        r = re.search(r'^[ \t]*from[ \t]+([A-Za-z_][A-Za-z0-9_\.]*)[ \t]+import[ \t]+.*$', line)
        if r :
            modules[r.group(1)] = "INCLUDE"

    filehandle.close()

#
# Remove non-critical-internal and non-critical-external modules
#
for k in modules :

    for r in module_regexps :

        if re.match(r'^' + r + '$', k) :
            modules[k] = "EXCLUDE"
            debug("Module " + k + "' excluded\n")
            continue


#
# Write output file
#
output_file   = rules_file + ".m4"
output_handle = open(output_file, "w")

if output_handle == None :
    error(program + ": Cannot open `" + output_file + "' file for output\n")
    sys.exit(1)

output_handle.write("#\n")
output_handle.write("# Autogenerated file, DO NOT EDIT\n")
output_handle.write("#\n")
output_handle.write("\n")

output_handle.write("#\n")
output_handle.write("# Files matching regexps:\n")
output_handle.write("#\n")

for f in sorted(files) :
    output_handle.write("#  " + f + "\n")

output_handle.write("#\n")
output_handle.write("\n")

output_handle.write("AC_DEFUN([PYTHON_AUTOFRISK_CHECKS],[\n")

for k in sorted(modules.keys()) :
    #
    # XXX FIXME:
    #     It should be better to add a commentify($string) in the else ...
    #
    if modules[k] == "INCLUDE" :
        string =                                                            \
            "    PYTHON_AUTOFRISK_MODULES([" + k + "],[],[\n"               \
            "        AC_MSG_ERROR([cannot find python module " + k + "])\n" \
            "    ])\n"

        output_handle.write(string)
    elif modules[k] == "EXCLUDE" :
        string = \
            "    #PYTHON_AUTOFRISK_MODULES([" + k + "],[],[])\n"

        output_handle.write(string)
    else :
        bug("Unknown module type")

output_handle.write("])\n")
output_handle.write("\n")
output_handle.write("AC_DEFUN([PYTHON_AUTOFRISK_SUMMARY],[\n")
output_handle.write("])\n")

output_handle.close()

sys.exit(0)
